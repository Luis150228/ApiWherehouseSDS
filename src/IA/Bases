ALTER TABLE `eut_workday`
ADD PRIMARY KEY (`usuario`),
ADD UNIQUE KEY `uk_nombre_full` (`nombre_full`),
ADD INDEX `idx_nombre_full` (`nombre_full`),
ADD INDEX `idx_usuario` (`usuario`);


CREATE INDEX `idx_fecha_alta` ON `eut_workday` (`fecha_alta`);
CREATE INDEX `idx_fecha_actualizacion` ON `eut_workday` (`fecha_actualizacion`);


ALTER TABLE `servicenow_reportes`
ADD INDEX `idx_abierto_por` (`abierto_por`),
ADD INDEX `idx_nombreproyecto` (`nombreproyecto`),
ADD INDEX `idx_categoria` (`categoria`),
ADD INDEX `idx_estatus` (`estatus`);

SELECT s.folio, s.estatus, s.categoria, w.nombre_full, w.puesto, w.area
FROM servicenow_reportes s
LEFT JOIN eut_workday w
  ON s.abierto_por = w.nombre_full
WHERE s.estatus = 'Cerrado'
  AND w.usuario IS NOT NULL;


DELIMITER $$
CREATE DEFINER=`lrangel`@`%` PROCEDURE `stp_eut_workdayBridge`(
    IN var_token LONGTEXT,
    IN var_destino VARCHAR(50)
)
BEGIN
    DECLARE let_alamacen VARCHAR(255);
    DECLARE let_user VARCHAR(255);
    DECLARE let_userId INT;
    DECLARE dateActualizado DATETIME;
    DECLARE dateEdodatabase DATETIME;
    DECLARE let_dateWorday DATETIME;

    -- 1. Validar token y obtener datos de usuario
    SET let_userId = (SELECT tokenValidate(var_token));
    IF let_userId IS NULL OR let_userId < 1 THEN
        SELECT 'Token inválido o usuario no autorizado' AS error_msg;
        LEAVE proc_end;
    END IF;

    SELECT `user`, ubicacion
    INTO let_user, let_alamacen
    FROM eut_users
    WHERE num_user = let_userId
    LIMIT 1;

    -- 2. Obtener fecha de actualización de edodatabase
    SELECT CONCAT(DATE(dbUpdate), ' 00:00:00')
    INTO let_dateWorday
    FROM edodatabase
    WHERE nombre = var_destino
    LIMIT 1;

    -- 3. Marcar como inactivos registros antiguos usando índice en fecha_actualizacion
    UPDATE eut_workday
    SET estatus_expediente = 'WD Inactivo'
    WHERE usuario <> 'C000000'
      AND fecha_actualizacion < let_dateWorday;

    -- 4. Insertar / actualizar datos desde bridge (usa PK en `usuario`)
    INSERT INTO eut_workday (
        usuario, n_user, nombre_full, nombre, apellidop, apellidom, mail,
        upn_wd, puesto, cc_wd, cc_type, area, ubicacion, region, supervisor,
        empresa, estatus_expediente, user_update, fecha_alta, fecha_actualizacion
    )
    SELECT
        usuario, n_user, nombre_full, nombre, apellidop, apellidom, mail,
        upn_wd, puesto, cc_wd, cc_type, area, ubicacion, region, supervisor,
        empresa, estatus_expediente, user_update, fecha_alta, fecha_actualizacion
    FROM eut_workday_bridge
    ON DUPLICATE KEY UPDATE
        mail = VALUES(mail),
        puesto = VALUES(puesto),
        area = VALUES(area),
        ubicacion = VALUES(ubicacion),
        supervisor = VALUES(supervisor),
        empresa = VALUES(empresa),
        estatus_expediente = VALUES(estatus_expediente),
        cc_wd = VALUES(cc_wd),
        cc_type = VALUES(cc_type),
        upn_wd = VALUES(upn_wd),
        user_update = VALUES(user_update),
        fecha_actualizacion = VALUES(fecha_actualizacion);

    -- 5. Actualizar fecha en edodatabase si hay nuevos datos
    SELECT MAX(fecha_alta) INTO dateActualizado FROM eut_workday_bridge;
    SELECT dbUpdate INTO dateEdodatabase FROM edodatabase WHERE nombre = var_destino LIMIT 1;

    IF dateActualizado > dateEdodatabase THEN
        UPDATE edodatabase
        SET dbUpdate = dateActualizado
        WHERE nombre = var_destino;
    END IF;

    -- 6. Limpiar registros inválidos optimizado (usa índices)
    DELETE FROM eut_workday WHERE usuario = '' OR usuario LIKE 'Usuario%';

    -- 7. Vaciar tabla bridge rápido (siempre reinicia datos temporales)
    TRUNCATE TABLE eut_workday_bridge;

    -- 8. Retornar estado actualizado
    SELECT etiqueta, dbUpdate, 0 AS link
    FROM edodatabase
    WHERE nombre = var_destino;

proc_end:
END$$
DELIMITER ;
