DELIMITER $$

CREATE DEFINER=`lrangel`@`%` PROCEDURE `stp_generic_tickets_all`()
BEGIN
    -- 1. Declaración de variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_folio VARCHAR(20);
    DECLARE v_texto LONGTEXT;
    DECLARE v_bloque LONGTEXT;
    DECLARE v_incidencia_principal VARCHAR(45);
    DECLARE v_incidencia_secundarias INT;
    DECLARE v_incidencia_padre VARCHAR(20);
    DECLARE v_abierto_por VARCHAR(150);
    DECLARE v_nombreproyecto TINYTEXT;
    DECLARE v_origen VARCHAR(150);

    -- Variables para campos extraídos
    DECLARE v_expediente VARCHAR(50);
    DECLARE v_ext_contacto VARCHAR(100);
    DECLARE v_cel_contacto VARCHAR(100);
    DECLARE v_nombre2_contacto VARCHAR(200);
    DECLARE v_cel2_contacto VARCHAR(100);
    DECLARE v_correo VARCHAR(200);
    DECLARE v_puesto VARCHAR(200);
    DECLARE v_cc VARCHAR(50);
    DECLARE v_region VARCHAR(100);
    DECLARE v_upn VARCHAR(150);
    DECLARE v_usuario_n VARCHAR(100);
    DECLARE v_ip VARCHAR(100);
    DECLARE v_hostname VARCHAR(150);
    DECLARE v_tipo_usuario VARCHAR(100);
    DECLARE v_descripcion_incidente VARCHAR(500);
    DECLARE v_numero_afectados VARCHAR(50);
    DECLARE v_carrier VARCHAR(100);
    DECLARE v_ip_carrier VARCHAR(100);

    -- 2. Declaración de cursor
    DECLARE cur CURSOR FOR
        SELECT r.folio,
               r.incidencia_principal,
               r.incidencia_secundarias,
               r.abierto_por,
               r.nombreproyecto,
               r.origen,
               CASE
                   WHEN r.descripcion LIKE '%/**Generic BEGIN**/%' THEN r.descripcion
                   WHEN r.obs_notasresolucion LIKE '%/**Generic BEGIN**/%' THEN r.obs_notasresolucion
                   ELSE NULL
               END AS texto
        FROM eut_reportesbk.servicenow_reportes r
        WHERE (r.incidencia_principal != '' OR r.incidencia_secundarias >= 1)
          AND origen = 'SNGlobal Incidentes'
          AND r.abierto >= '2025-07-01 00:00:00';

    -- 3. Declaración del handler
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- 4. Crear tabla temporal
    DROP TEMPORARY TABLE IF EXISTS tmp_tabla_plantillas;
    CREATE TEMPORARY TABLE tmp_tabla_plantillas (
        folio VARCHAR(20),
        incidencia_padre VARCHAR(20),
        expediente VARCHAR(30),
        abierto_por VARCHAR(150),
        nombreproyecto TINYTEXT,
        ext_contacto VARCHAR(100),
        cel_contacto VARCHAR(100),
        nombre2_contacto VARCHAR(200),
        cel2_contacto VARCHAR(100),
        mail VARCHAR(200),
        puesto VARCHAR(200),
        CC VARCHAR(50),
        region VARCHAR(100),
        UPN VARCHAR(150),
        usuario_n VARCHAR(100),
        IP VARCHAR(100),
        hostname VARCHAR(150),
        tipo_usuario VARCHAR(100),
        descripcion_incidente VARCHAR(500),
        numero_afectados VARCHAR(50),
        carrier VARCHAR(100),
        IP_carrier VARCHAR(100),
        origen VARCHAR(150)
    );

    -- 5. Lógica del cursor
    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_folio, v_incidencia_principal, v_incidencia_secundarias, v_abierto_por, v_nombreproyecto, v_origen, v_texto;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Determinar incidencia_padre
        IF v_incidencia_secundarias >= 1 THEN
            SET v_incidencia_padre = v_folio;
        ELSEIF v_incidencia_principal IS NOT NULL AND v_incidencia_principal != '' THEN
            SET v_incidencia_padre = v_incidencia_principal;
        ELSE
            SET v_incidencia_padre = 'SIN DATOS';
        END IF;

        -- Extraer bloque entre BEGIN y END
        IF v_texto IS NOT NULL THEN
            SET v_bloque = REGEXP_SUBSTR(v_texto, '/\\*\\*Generic BEGIN\\*\\*/([\\s\\S]*?)/\\*\\*Generic END\\*\\*/');
        ELSE
            SET v_bloque = NULL;
        END IF;

        IF v_bloque IS NOT NULL THEN
            -- Limpiar etiquetas y espacios
            SET v_bloque = REPLACE(v_bloque, '/**Generic BEGIN**/', '');
            SET v_bloque = REPLACE(v_bloque, '/**Generic END**/', '');
            SET v_bloque = REGEXP_REPLACE(v_bloque, '[[:space:]]+', ' ');

            -- Extraer campos
            SET v_expediente = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&EXPEDIENTE:[^&\n]+'), '&EXPEDIENTE:', ''))),''),'SIN DATOS');
            SET v_ext_contacto = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&EXT_CONTACTO:[^&\n]+'), '&EXT_CONTACTO:', ''))),''),'SIN DATOS');
            SET v_cel_contacto = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CEL_CONTACTO:[^&\n]+'), '&CEL_CONTACTO:', ''))),''),'SIN DATOS');
            SET v_nombre2_contacto = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&NOMBRE2_CONTACTO:[^&\n]+'), '&NOMBRE2_CONTACTO:', ''))),''),'SIN DATOS');
            SET v_cel2_contacto = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CEL2_CONTACTO:[^&\n]+'), '&CEL2_CONTACTO:', ''))),''),'SIN DATOS');
            SET v_correo = IFNULL(NULLIF(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CORREO:[^&\n]+'), '&CORREO:', '')),''),'SIN DATOS');
            SET v_puesto = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&PUESTO:[^&\n]+'), '&PUESTO:', ''))),''),'SIN DATOS');
            SET v_cc = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CC:[^&\n]+'), '&CC:', ''))),''),'SIN DATOS');
            SET v_region = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&REGION:[^&\n]+'), '&REGION:', ''))),''),'SIN DATOS');
            SET v_upn = IFNULL(NULLIF(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&UPN:[^&\n]+'), '&UPN:', '')),''),'SIN DATOS');
            SET v_usuario_n = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&USUARIO_N:[^&\n]+'), '&USUARIO_N:', ''))),''),'SIN DATOS');
            SET v_ip = IFNULL(NULLIF(REPLACE(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&IP:[^&\n]+'), '&IP:', ''))),' ',''),''),'SIN DATOS');
            SET v_hostname = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&HOSTNAME:[^&\n]+'), '&HOSTNAME:', ''))),''),'SIN DATOS');
            SET v_tipo_usuario = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&TIPO_USUARIO:[^&\n]+'), '&TIPO_USUARIO:', ''))),''),'SIN DATOS');
            SET v_descripcion_incidente = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&DESCRIPCION_INCIDENTE:[^&\n]+'), '&DESCRIPCION_INCIDENTE:', ''))),''),'SIN DATOS');
            SET v_numero_afectados = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&NUMERO_AFECTADOS:[[:space:]]*[0-9\\-]+'), '&NUMERO_AFECTADOS:[[:space:]]*', ''))),''),'SIN DATOS');
            SET v_carrier = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CARRIER:[^&\n]+'), '&CARRIER:', ''))),''),'SIN DATOS');
            SET v_ip_carrier = IFNULL(NULLIF(REPLACE(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&IP DEL CARRIER:[^&\n]+'), '&IP DEL CARRIER:', ''))),' ',''),''),'SIN DATOS');

            -- Insertar fila
            INSERT INTO tmp_tabla_plantillas
            VALUES (
                v_folio, v_incidencia_padre,
                v_expediente, v_abierto_por, v_nombreproyecto, v_ext_contacto, v_cel_contacto, v_nombre2_contacto, v_cel2_contacto,
                v_correo, v_puesto, v_cc, v_region, v_upn, v_usuario_n,
                v_ip, v_hostname, v_tipo_usuario, v_descripcion_incidente, v_numero_afectados,
                v_carrier, v_ip_carrier, v_origen
            );
        ELSE
            -- Sin plantilla
            INSERT INTO tmp_tabla_plantillas
            SELECT 
                r.folio,
                IF(r.incidencia_secundarias >= 1, r.folio, r.incidencia_principal),
                IFNULL(w.usuario, 'SIN DATOS'),
                r.abierto_por,
                r.nombreproyecto,
                'SIN DATOS',
                IFNULL(l.num_movil, 'SIN DATOS'),
                w.supervisor,
                'SIN DATOS',
                w.mail,
                w.puesto,
                RIGHT(w.cc_wd, 4),
                REGEXP_REPLACE(w.region, '^Region[[:space:]]+', ''),
                w.upn_wd,
                w.n_user,
                IFNULL(c.ip_address, 'SIN DATOS'),
                IFNULL(c.name, 'SIN DATOS'),
                r.suc_corp,
                'SIN DATOS',
                'SIN DATOS',
                'SIN DATOS',
                'SIN DATOS',
                r.origen
            FROM eut_reportesbk.servicenow_reportes r
            LEFT JOIN eut_toolmovil.eut_workday w 
                ON r.abierto_por = w.nombre_full
            LEFT JOIN eut_toolmovil.inventario_lineas l 
                ON w.usuario = l.expediente
            LEFT JOIN (
                SELECT cm1.*
                FROM eut_reportesbk.eut_cmdb cm1
                INNER JOIN (
                    SELECT expediente, MAX(u_created_date) AS max_date
                    FROM eut_reportesbk.eut_cmdb
                    GROUP BY expediente
                ) cm2 ON cm1.expediente = cm2.expediente 
                     AND cm1.u_created_date = cm2.max_date
            ) c ON w.usuario = c.expediente
            WHERE r.folio = v_folio;
        END IF;

    END LOOP;

    CLOSE cur;

    SELECT * FROM tmp_tabla_plantillas;
END$$

DELIMITER ;
