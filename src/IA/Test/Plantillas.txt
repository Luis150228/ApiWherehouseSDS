CREATE OR REPLACE FUNCTION fn_parseItemGenericQuality_ci(
  var_bloque LONGTEXT,
  var_title  VARCHAR(50)
) RETURNS MEDIUMTEXT
DETERMINISTIC
BEGIN
  DECLARE blk LONGTEXT;
  DECLARE blkU LONGTEXT;
  DECLARE needle VARCHAR(64);
  DECLARE pos INT; DECLARE start INT;
  DECLARE next_amp INT; DECLARE next_nl INT; DECLARE endpos INT;
  DECLARE val MEDIUMTEXT;

  IF var_bloque IS NULL OR var_title IS NULL THEN
    RETURN NULL;
  END IF;

  SET blk  = var_bloque;
  SET blkU = UPPER(var_bloque);
  SET needle = CONCAT('&', UPPER(var_title), ':');

  SET pos = LOCATE(needle, blkU);
  IF pos = 0 THEN
    RETURN NULL; -- no está la clave
  END IF;

  SET start = pos + CHAR_LENGTH(needle);
  SET next_amp = LOCATE('&', blkU, start);
  SET next_nl  = LOCATE('\n', blkU, start);

  SET endpos = CASE
    WHEN next_amp = 0 AND next_nl = 0 THEN CHAR_LENGTH(blk) + 1
    WHEN next_amp = 0 THEN next_nl
    WHEN next_nl  = 0 THEN next_amp
    WHEN next_amp <  next_nl THEN next_amp ELSE next_nl
  END;

  SET val = TRIM(SUBSTRING(blk, start, endpos - start));

  /* Normalizaciones por clave */
  IF UPPER(var_title) IN ('IP','IP DEL CARRIER') THEN
    SET val = REPLACE(UPPER(val),' ',''); -- quita espacios en IP
  ELSEIF UPPER(var_title) = 'HOSTNAME' THEN
    SET val = UPPER(val);
  ELSEIF UPPER(var_title) = 'NUMERO_AFECTADOS' THEN
    SET val = UPPER(val);
  END IF;

  IF val = '' OR UPPER(val)='SIN DATOS' THEN
    RETURN NULL;
  END IF;

  RETURN val;
END;


CREATE OR REPLACE DEFINER=`lrangel`@`%` PROCEDURE `stp_generic_tickets_QualityScore_full`()
BEGIN
  WITH
  base AS (
    SELECT
      r.abierto_por,
      r.folio,
      IF(r.incidencia_principal <> '', r.incidencia_principal, r.folio) AS incidencia_principal,
      r.abierto,
      CONCAT(r.descripcion, '\n', r.obs_notasresolucion) AS bloque,

      /* Campos de la plantilla (case-insensitive) */
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'EXPEDIENTE')            AS expediente,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'EXT_CONTACTO')          AS ext_contacto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'CEL_CONTACTO')          AS cel_contacto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'NOMBRE2_CONTACTO')      AS nombre2_contacto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'EXT2_CONTACTO')         AS ext2_contacto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'CEL2_CONTACTO')         AS cel2_contacto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'CORREO')                AS correo,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'PUESTO')                AS puesto,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'CC')                    AS cc,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'REGION')                AS region,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'UPN')                   AS upn,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'USUARIO_N')             AS usuario_n,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'IP')                    AS ip,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'HOSTNAME')              AS hostname,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'TIPO_USUARIO')          AS tipo_usuario,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'DESCRIPCION_INCIDENTE') AS descripcion_incidente,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'NUMERO_AFECTADOS')      AS numero_afectados,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'CARRIER')               AS carrier,
      fn_parseItemGenericQuality_ci(CONCAT(r.descripcion, '\n', r.obs_notasresolucion), 'IP DEL CARRIER')        AS ip_carrier
    FROM servicenow_reportes r
    WHERE (r.incidencia_principal <> '' OR r.incidencia_secundarias >= 1)
      AND r.origen = 'SNGlobal Incidentes'
      AND r.abierto >= '2025-07-01 00:00:00'
      AND (r.descripcion LIKE '%**Gener%' OR r.obs_notasresolucion LIKE '%**Gener%')
  ),
  norm AS (
    SELECT
      b.*,
      NULLIF(NULLIF(TRIM(b.expediente),''),'SIN DATOS')              AS expediente_n,
      NULLIF(NULLIF(TRIM(b.ext_contacto),''),'SIN DATOS')            AS ext_contacto_n,
      NULLIF(NULLIF(TRIM(b.cel_contacto),''),'SIN DATOS')            AS cel_contacto_n,
      NULLIF(NULLIF(TRIM(b.nombre2_contacto),''),'SIN DATOS')        AS nombre2_contacto_n,
      NULLIF(NULLIF(TRIM(b.ext2_contacto),''),'SIN DATOS')           AS ext2_contacto_n,
      NULLIF(NULLIF(TRIM(b.cel2_contacto),''),'SIN DATOS')           AS cel2_contacto_n,
      NULLIF(NULLIF(TRIM(b.correo),''),'SIN DATOS')                  AS correo_n,
      NULLIF(NULLIF(TRIM(b.puesto),''),'SIN DATOS')                  AS puesto_n,
      NULLIF(NULLIF(TRIM(b.cc),''),'SIN DATOS')                      AS cc_n,
      NULLIF(NULLIF(TRIM(b.region),''),'SIN DATOS')                  AS region_n,
      NULLIF(NULLIF(TRIM(b.upn),''),'SIN DATOS')                     AS upn_n,
      NULLIF(NULLIF(TRIM(b.usuario_n),''),'SIN DATOS')               AS usuario_n_n,
      NULLIF(NULLIF(TRIM(b.ip),''),'SIN DATOS')                      AS ip_n,
      NULLIF(NULLIF(TRIM(b.hostname),''),'SIN DATOS')                AS hostname_n,
      NULLIF(NULLIF(TRIM(b.tipo_usuario),''),'SIN DATOS')            AS tipo_usuario_n,
      NULLIF(NULLIF(TRIM(b.descripcion_incidente),''),'SIN DATOS')   AS descripcion_incidente_n,
      NULLIF(NULLIF(TRIM(b.numero_afectados),''),'SIN DATOS')        AS numero_afectados_n,
      NULLIF(NULLIF(TRIM(b.carrier),''),'SIN DATOS')                 AS carrier_n,
      NULLIF(NULLIF(TRIM(b.ip_carrier),''),'SIN DATOS')              AS ip_carrier_n
    FROM base b
  ),
  flags AS (
    SELECT
      n.*,

      /* Presencia (requeridos) */
      IF(n.expediente_n IS NOT NULL, 1, 0) AS req_exp,
      IF(n.correo_n     IS NOT NULL, 1, 0) AS req_correo,
      IF(n.cc_n         IS NOT NULL, 1, 0) AS req_cc,
      IF(n.region_n     IS NOT NULL, 1, 0) AS req_region,
      IF(n.upn_n        IS NOT NULL, 1, 0) AS req_upn,
      IF(n.ip_n         IS NOT NULL, 1, 0) AS req_ip,
      IF(n.hostname_n   IS NOT NULL, 1, 0) AS req_hostname,
      IF(n.cel_contacto_n IS NOT NULL, 1, 0) AS req_cel,

      /* Formato (válidos) */
      IF(UPPER(n.expediente_n) REGEXP '^[A-Z][0-9]{6}$', 1, 0) AS ok_exp,
      IF(n.correo_n REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$', 1, 0) AS ok_correo,
      IF(REPLACE(n.cc_n,' ','')            REGEXP '^[0-9]{3,5}$', 1, 0) AS ok_cc,
      IF(REPLACE(n.ext_contacto_n,' ','')  REGEXP '^[0-9]{3,5}$', 1, 0) AS ok_ext1,
      IF(REPLACE(n.ext2_contacto_n,' ','') REGEXP '^[0-9]{3,5}$', 1, 0) AS ok_ext2,
      IF(REPLACE(n.cel_contacto_n,' ','')  REGEXP '^[0-9]{10}$', 1, 0) AS ok_cel1,
      IF(REPLACE(n.cel2_contacto_n,' ','') REGEXP '^[0-9]{10}$', 1, 0) AS ok_cel2,
      IF(n.ip_n REGEXP '^((25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])$', 1, 0) AS ok_ip,
      IF(n.hostname_n REGEXP '^[A-Za-z0-9][A-Za-z0-9-]{0,62}(\\.[A-Za-z0-9-]{1,63})*$', 1, 0) AS ok_hostname,
      IF(n.upn_n IS NOT NULL AND n.correo_n IS NOT NULL AND n.upn_n LIKE CONCAT('%', SUBSTRING_INDEX(n.correo_n,'@',-1)), 1, 0) AS ok_upn_dom,
      IF(n.numero_afectados_n IS NULL OR n.numero_afectados_n='SIN DATOS' OR n.numero_afectados_n REGEXP '^[0-9]+(-[0-9]+)?$', 1, 0) AS ok_numaf,
      IF(n.ip_carrier_n IS NULL OR n.ip_carrier_n REGEXP '^((25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]?[0-9])$', 1, 0) AS ok_ip_carrier
    FROM norm n
  )
  SELECT
    f.abierto_por,
    f.folio,
    f.incidencia_principal,
    f.abierto,

    /* Valores capturados */
    f.expediente,
    f.ext_contacto,
    f.cel_contacto,
    f.nombre2_contacto,
    f.ext2_contacto,
    f.cel2_contacto,
    f.correo,
    f.puesto,
    f.cc,
    f.region,
    f.upn,
    f.usuario_n,
    f.ip,
    f.hostname,
    f.tipo_usuario,
    f.descripcion_incidente,
    f.numero_afectados,
    f.carrier,
    f.ip_carrier,

    /* Score (suma de válidos de formato) */
    (
      f.ok_exp + f.ok_correo + f.ok_cc + f.ok_ext1 + f.ok_ext2 +
      f.ok_cel1 + f.ok_cel2 + f.ok_ip + f.ok_hostname + f.ok_upn_dom +
      f.ok_numaf + f.ok_ip_carrier
    ) AS score,

    /* Faltantes (requeridos no presentes) */
    TRIM(BOTH ', ' FROM CONCAT_WS(', ',
      IF(f.req_exp=1, NULL, 'EXPEDIENTE'),
      IF(f.req_correo=1, NULL, 'CORREO'),
      IF(f.req_cc=1, NULL, 'CC'),
      IF(f.req_region=1, NULL, 'REGION'),
      IF(f.req_upn=1, NULL, 'UPN'),
      IF(f.req_ip=1, NULL, 'IP'),
      IF(f.req_hostname=1, NULL, 'HOSTNAME'),
      IF(f.req_cel=1, NULL, 'CEL_CONTACTO')
    )) AS missing_fields,

    /* Presentes pero inválidos */
    TRIM(BOTH ', ' FROM CONCAT_WS(', ',
      IF(f.req_exp=1       AND f.ok_exp=0,        'EXPEDIENTE (letra+6 dígitos)', NULL),
      IF(f.req_correo=1    AND f.ok_correo=0,     'CORREO (formato)', NULL),
      IF(f.req_cc=1        AND f.ok_cc=0,         'CC (3-5 dígitos)', NULL),
      IF(f.ext_contacto_n IS NOT NULL AND f.ok_ext1=0, 'EXT_CONTACTO (3-5 dígitos)', NULL),
      IF(f.ext2_contacto_n IS NOT NULL AND f.ok_ext2=0, 'EXT2_CONTACTO (3-5 dígitos)', NULL),
      IF(f.cel_contacto_n IS NOT NULL AND f.ok_cel1=0, 'CEL_CONTACTO (10 dígitos)', NULL),
      IF(f.cel2_contacto_n IS NOT NULL AND f.ok_cel2=0, 'CEL2_CONTACTO (10 dígitos)', NULL),
      IF(f.req_ip=1        AND f.ok_ip=0,         'IP (IPv4 inválida)', NULL),
      IF(f.req_hostname=1  AND f.ok_hostname=0,   'HOSTNAME (inválido)', NULL),
      IF(f.req_upn=1       AND f.ok_upn_dom=0,    'UPN (dominio ≠ CORREO)', NULL),
      IF(f.numero_afectados_n IS NOT NULL AND f.ok_numaf=0, 'NUMERO_AFECTADOS (n o n-m)', NULL),
      IF(f.ip_carrier_n    IS NOT NULL AND f.ok_ip_carrier=0, 'IP DEL CARRIER (IPv4 inválida)', NULL)
    )) AS invalid_fields

  FROM flags f
  ORDER BY score DESC, f.abierto DESC;
END;

