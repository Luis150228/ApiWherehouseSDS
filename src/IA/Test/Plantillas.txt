DELIMITER $$

CREATE DEFINER=`lrangel`@`%` PROCEDURE `stp_generic_tickets_all_untemporal`()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_folio VARCHAR(20);
    DECLARE v_texto LONGTEXT;
    DECLARE v_bloque LONGTEXT;
    DECLARE v_incidencia_principal VARCHAR(45);
    DECLARE v_incidencia_secundarias INT;
    DECLARE v_incidencia_padre VARCHAR(20);
    DECLARE v_abierto_por VARCHAR(150);
    DECLARE v_nombreproyecto tinytext;
    DECLARE v_abierto DATETIME;
    DECLARE v_status VARCHAR(50);
    DECLARE v_origen VARCHAR(150);

    -- Variables para salida del bloque parseado
    DECLARE expediente_out VARCHAR(30);
    DECLARE ext_contacto_out VARCHAR(100);
    DECLARE cel_contacto_out VARCHAR(100);
    DECLARE nombre2_contacto_out VARCHAR(200);
    DECLARE cel2_contacto_out VARCHAR(100);
    DECLARE correo_out VARCHAR(200);
    DECLARE puesto_out VARCHAR(200);
    DECLARE cc_out VARCHAR(50);
    DECLARE region_out VARCHAR(100);
    DECLARE upn_out VARCHAR(150);
    DECLARE usuario_n_out VARCHAR(100);
    DECLARE ip_out VARCHAR(100);
    DECLARE hostname_out VARCHAR(150);
    DECLARE tipo_usuario_out VARCHAR(100);
    DECLARE descripcion_incidente_out VARCHAR(500);
    DECLARE numero_afectados_out VARCHAR(50);
    DECLARE carrier_out VARCHAR(100);
    DECLARE ip_carrier_out VARCHAR(100);

    -- Cursor para los que SÍ tienen plantilla
    DECLARE cur CURSOR FOR
        SELECT r.folio,
               r.incidencia_principal,
               r.abierto,
               r.estatus,
               r.incidencia_secundarias,
               r.abierto_por,
               r.nombreproyecto,
               r.origen,
               CASE
                   WHEN r.descripcion LIKE '%/**Generic BEGIN**/%' THEN r.descripcion
                   WHEN r.obs_notasresolucion LIKE '%/**Generic BEGIN**/%' THEN r.obs_notasresolucion
                   ELSE NULL
               END AS texto
        FROM eut_reportesbk.servicenow_reportes r
        WHERE (r.incidencia_principal != '' OR r.incidencia_secundarias >= 1)
          AND r.origen = 'SNGlobal Incidentes'
          AND r.abierto >= '2025-07-01 00:00:00'
          AND (
               r.descripcion LIKE '%/**Generic BEGIN**/%'
               OR r.obs_notasresolucion LIKE '%/**Generic BEGIN**/%'
          );

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- 1. Primero devolvemos registros SIN plantilla
    SELECT 
        r.folio,
        IF(r.incidencia_secundarias >= 1, r.folio, r.incidencia_principal) AS incidencia_padre,
        r.abierto,
        r.estatus,
        IFNULL(w.usuario, 'SIN DATOS') AS expediente,
        r.abierto_por,
        r.nombreproyecto,
        'SIN DATOS' AS ext_contacto,
        IFNULL(l.num_movil, 'SIN DATOS') AS cel_contacto,
        UPPER(w.supervisor) AS nombre2_contacto,
        'SIN DATOS' AS cel2_contacto,
        w.mail,
        UPPER(w.puesto) AS puesto,
        RIGHT(w.cc_wd, 4) AS CC,
        UPPER(REGEXP_REPLACE(w.region, '^Region[[:space:]]+', '')) AS region,
        w.upn_wd AS UPN,
        UPPER(w.n_user) AS usuario_n,
        IFNULL(c.ip_address, 'SIN DATOS') AS IP,
        IFNULL(UPPER(c.name), 'SIN DATOS') AS hostname,
        UPPER(r.suc_corp) AS tipo_usuario,
        'SIN DATOS' AS descripcion_incidente,
        'SIN DATOS' AS numero_afectados,
        'SIN DATOS' AS carrier,
        'SIN DATOS' AS IP_carrier,
        'EUT_SYSTEM' AS origen
    FROM eut_reportesbk.servicenow_reportes r
    LEFT JOIN eut_toolmovil.eut_workday w 
        ON r.abierto_por = w.nombre_full
    LEFT JOIN eut_toolmovil.inventario_lineas l 
        ON w.usuario = l.expediente
    LEFT JOIN (
        SELECT cm1.*
        FROM eut_reportesbk.eut_cmdb_bridge cm1
        INNER JOIN (
            SELECT expediente, MAX(u_created_date) AS max_date
            FROM eut_reportesbk.eut_cmdb_bridge
            GROUP BY expediente
        ) cm2 ON cm1.expediente = cm2.expediente 
             AND cm1.u_created_date = cm2.max_date
    ) c ON w.usuario = c.expediente
    WHERE (r.incidencia_principal != '' OR r.incidencia_secundarias >= 1)
      AND r.origen = 'SNGlobal Incidentes'
      AND r.abierto >= '2025-07-01 00:00:00'
      AND r.descripcion NOT LIKE '%/**Generic BEGIN**/%'
      AND r.obs_notasresolucion NOT LIKE '%/**Generic BEGIN**/%'

    UNION ALL

    -- 2. Ahora procesamos los que SÍ tienen plantilla
    (
      -- Usamos un bloque dinámico: el cursor construirá un SELECT final
      BEGIN
        OPEN cur;
        read_loop: LOOP
            FETCH cur INTO v_folio, v_incidencia_principal, v_abierto, v_status,
                          v_incidencia_secundarias, v_abierto_por, v_nombreproyecto, v_origen, v_texto;
            IF done THEN
                LEAVE read_loop;
            END IF;

            -- Determinar incidencia_padre
            IF v_incidencia_secundarias >= 1 THEN
                SET v_incidencia_padre = v_folio;
            ELSEIF v_incidencia_principal IS NOT NULL AND v_incidencia_principal != '' THEN
                SET v_incidencia_padre = v_incidencia_principal;
            ELSE
                SET v_incidencia_padre = 'SIN DATOS';
            END IF;

            -- Parsear el bloque (mismo código de extracción que tenías)
            SET v_bloque = REGEXP_SUBSTR(v_texto, '/\\*\\*Generic BEGIN\\*\\*/([\\s\\S]*?)/\\*\\*Generic END\\*\\*/');
            IF v_bloque IS NOT NULL THEN
                SET v_bloque = REPLACE(v_bloque, '/**Generic BEGIN**/', '');
                SET v_bloque = REPLACE(v_bloque, '/**Generic END**/', '');
                SET v_bloque = REGEXP_REPLACE(v_bloque, '[[:space:]]+', ' ');

                -- Campos parseados
                SET expediente_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&EXPEDIENTE:[^&\n]+'), '&EXPEDIENTE:', ''))),''),'SIN DATOS');
                SET ext_contacto_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&EXT_CONTACTO:[^&\n]+'), '&EXT_CONTACTO:', ''))),''),'SIN DATOS');
                SET cel_contacto_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CEL_CONTACTO:[^&\n]+'), '&CEL_CONTACTO:', ''))),''),'SIN DATOS');
                SET nombre2_contacto_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&NOMBRE2_CONTACTO:[^&\n]+'), '&NOMBRE2_CONTACTO:', ''))),''),'SIN DATOS');
                SET cel2_contacto_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CEL2_CONTACTO:[^&\n]+'), '&CEL2_CONTACTO:', ''))),''),'SIN DATOS');
                SET correo_out = IFNULL(NULLIF(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CORREO:[^&\n]+'), '&CORREO:', '')),''),'SIN DATOS');
                SET puesto_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&PUESTO:[^&\n]+'), '&PUESTO:', ''))),''),'SIN DATOS');
                SET cc_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CC:[^&\n]+'), '&CC:', ''))),''),'SIN DATOS');
                SET region_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&REGION:[^&\n]+'), '&REGION:', ''))),''),'SIN DATOS');
                SET upn_out = IFNULL(NULLIF(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&UPN:[^&\n]+'), '&UPN:', '')),''),'SIN DATOS');
                SET usuario_n_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&USUARIO_N:[^&\n]+'), '&USUARIO_N:', ''))),''),'SIN DATOS');
                SET ip_out = IFNULL(NULLIF(REPLACE(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&IP:[^&\n]+'), '&IP:', ''))),' ',''),''),'SIN DATOS');
                SET hostname_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&HOSTNAME:[^&\n]+'), '&HOSTNAME:', ''))),''),'SIN DATOS');
                SET tipo_usuario_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&TIPO_USUARIO:[^&\n]+'), '&TIPO_USUARIO:', ''))),''),'SIN DATOS');
                SET descripcion_incidente_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&DESCRIPCION_INCIDENTE:[^&\n]+'), '&DESCRIPCION_INCIDENTE:', ''))),''),'SIN DATOS');
                SET numero_afectados_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&NUMERO_AFECTADOS:[[:space:]]*[0-9\\-]+'), '&NUMERO_AFECTADOS:[[:space:]]*', ''))),''),'SIN DATOS');
                SET carrier_out = IFNULL(NULLIF(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&CARRIER:[^&\n]+'), '&CARRIER:', ''))),''),'SIN DATOS');
                SET ip_carrier_out = IFNULL(NULLIF(REPLACE(UPPER(TRIM(REGEXP_REPLACE(REGEXP_SUBSTR(v_bloque, '&IP DEL CARRIER:[^&\n]+'), '&IP DEL CARRIER:', ''))),' ',''),''),'SIN DATOS');

                -- Emitimos fila con SELECT
                SELECT 
                    v_folio AS folio,
                    v_incidencia_padre AS incidencia_padre,
                    v_abierto AS abierto,
                    v_status AS estatus,
                    expediente_out AS expediente,
                    v_abierto_por AS abierto_por,
                    v_nombreproyecto AS nombreproyecto,
                    ext_contacto_out AS ext_contacto,
                    cel_contacto_out AS cel_contacto,
                    nombre2_contacto_out AS nombre2_contacto,
                    cel2_contacto_out AS cel2_contacto,
                    correo_out AS mail,
                    puesto_out AS puesto,
                    cc_out AS CC,
                    region_out AS region,
                    upn_out AS UPN,
                    usuario_n_out AS usuario_n,
                    ip_out AS IP,
                    hostname_out AS hostname,
                    tipo_usuario_out AS tipo_usuario,
                    descripcion_incidente_out AS descripcion_incidente,
                    numero_afectados_out AS numero_afectados,
                    carrier_out AS carrier,
                    ip_carrier_out AS IP_carrier,
                    v_origen AS origen;
            END IF;
        END LOOP;
        CLOSE cur;
      END
    );

END$$

DELIMITER ;
