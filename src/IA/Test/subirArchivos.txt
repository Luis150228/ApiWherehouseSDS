import { fetchSaveDatas } from './connect.js';

const ajustCSV = async (tipo, datafile, tiempo, progressBar, alert, loader, btnalt) => {
	const normalizarTxt = (texto) => {
		if (texto !== undefined) {
			texto = texto.replace(/['"]/g, '');
			texto = texto.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

			return texto.trim();
		}
	};

	let filas;
	Papa.parse(datafile, {
		delimiter: ',',
		header: false,
		skEmptyLines: true,
		complete: (results) => {
			filas = results.data;
		},
	});

	let quitar;
	quitar = filas.pop();

	if (tipo === 'workday') {
		filas = filas.map((reg) => {
			return {
				usuario: reg[26],
				nombrefull: normalizarTxt(reg[1]),
				nombre: normalizarTxt(reg[28]),
				apellidop: normalizarTxt(reg[29]),
				apellidom: normalizarTxt(reg[30]),
				mail: reg[27],
				puesto: normalizarTxt(reg[3]),
				area: normalizarTxt(reg[5]),
				supervisor: normalizarTxt(reg[23]),
				empresa: normalizarTxt(reg[9]),
				ubicacion: normalizarTxt(reg[17]),
			};
		});
		filas = [...filas.slice(1)];
	} else if (tipo === 'workday_eut') {
		filas = filas.map((reg) => {
			return {
				nombrefull: normalizarTxt(reg[1]),
				puesto: normalizarTxt(reg[3]),
				area: normalizarTxt(reg[7]),
				cc_wd: normalizarTxt(reg[8]),
				cc_type: normalizarTxt(reg[9]),
				empresa: normalizarTxt(reg[11]),
				ubicacion: normalizarTxt(reg[17]),
				region: normalizarTxt(reg[18]),
				supervisor: normalizarTxt(reg[25]),
				mail: reg[26],
				n_user: normalizarTxt(reg[32]),
				usuario: normalizarTxt(reg[33]),
				upn: reg[34],
				nombre: normalizarTxt(reg[40]),
				apellidop: normalizarTxt(reg[41]),
				apellidom: normalizarTxt(reg[42]),
			};
		});
		filas = [...filas.slice(1)];
	} else if (tipo === 'planes') {
		filas = filas.map((reg) => {
			return {
				region: reg[0],
				cuenta_padre: reg[1],
				cuenta: reg[2],
				ciclo: reg[3],
				razon_social: reg[4],
				teléfono: reg[5],
				estatus_Tel: reg[6],
				motivo_tel: reg[7],
				iccid: normalizarTxt(reg[8]),
				imei: reg[9],
				estatus_cuenta: reg[10],
				nombre_plan: normalizarTxt(reg[11]),
				monto_renta: reg[12],
				equipo: normalizarTxt(reg[13]),
				modelo: normalizarTxt(reg[14]),
				duracion_plan: reg[15],
				inicio: reg[16],
				termino: reg[17],
				estauts_adendum: reg[18],
				meses_restantes: reg[19],
			};
		});
		filas = [...filas.slice(1)];
	} else if (tipo === 'enrollment') {
		filas = filas.map((reg) => {
			const orden = reg[23].split('_')[1];
			const expediente = reg[23].split('_')[0];
			const enrollmentDate = reg[2].split('.')[0];
			return {
				orden: `${expediente}_${reg[10]}`,
				expediente: expediente,
				iccid: reg[47],
				management_name: reg[26],
				model: reg[10],
				enrollment_so: reg[38],
				enrollment_version: reg[5],
				enrollment_date: enrollmentDate,
			};
		});
		filas = [...filas.slice(1)];
	} else if (tipo === 'asigmasiv') {
		filas = filas.map((reg) => {
			return {
				user: reg[0],
				nombre: reg[1],
				mail: reg[2],
				area: reg[3],
				puesto: reg[4],
				empresa: reg[5],
				modelo: reg[6],
				numero: reg[7],
				imei: reg[8],
			};
		});
		filas = [...filas.slice(1)];
	} else if (tipo === 'cmdb_ci_comm') {
		filas = filas.map((reg) => {
			return {
				asset_tag: reg[0],
				name: reg[1],
				phone_number: reg[2].replace("'", '').replace('+52', ''),
				u_status: reg[3],
				u_status_reason: reg[4],
				model_id: reg[5],
				manufacturer: reg[6],
				assigned_to: reg[7].replace("'", ''),
				assignment_group: reg[8],
				company: reg[9],
				u_obsolescence_status_hw: reg[10],
				u_obsolescence_status_sw: reg[11],
				u_os_model_id: reg[12],
				sys_class_name: reg[13],
				u_delivery: reg[14],
				used_for: reg[15],
				po_number: reg[16],
				u_imei: reg[17],
				serial_number: reg[18],
				sys_updated_on: reg[19],
			};
		});
		filas = [...filas.slice(1)];
	}

	const datasUp = [];
	let partData;

	if (tipo != 'ccpulse') {
		if (filas.length >= 2000) {
			partData = 100;
		} else if (filas.length >= 1000) {
			partData = 50;
		} else if (filas.length >= 500) {
			partData = 20;
		} else {
			partData = 10;
		}
	} else {
		partData = filas.length;
	}
	// /*
	for (let i = 0; i < filas.length; i += partData) {
		datasUp.push(filas.slice(i, i + partData));
	}

	loader.classList.toggle('msj-none');
	let resultado;
	for (const dataUp of datasUp) {
		resultado = await fetchSaveDatas(tiempo, tipo, dataUp, filas.length, progressBar, alert, btnalt);
	}
	return resultado;
	// */
};

export const openFile = (tipo, archivo, tiempo, print, alert, loader, btnalt) => {
	return new Promise((resolve, reject) => {
		if (archivo.type != 'text/csv') {
			reject('Archivo inválido');
		} else {
			const lector = new FileReader();
			lector.onload = (e) => {
				const contenido = e.target.result;
				ajustCSV(tipo, contenido, tiempo, print, alert, loader, btnalt)
					.then((result) => resolve(result))
					.catch((error) => reject(error));
			};
			lector.readAsText(archivo, 'windows-1252');
		}
	});
};
